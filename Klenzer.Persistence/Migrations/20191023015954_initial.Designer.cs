// <auto-generated />
using System;
using Klenzer.Persistence.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Klenzer.Persistence.Migrations
{
    [DbContext(typeof(KlenzerDbContext))]
    [Migration("20191023015954_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Klenzer.Domain.Entities.Agendamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClienteId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("DataFim");

                    b.Property<DateTime>("DataInicio");

                    b.Property<Guid>("FuncionarioId");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric(15, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("Agendamentos");
                });

            modelBuilder.Entity("Klenzer.Domain.Entities.AgendamentoServico", b =>
                {
                    b.Property<Guid>("AgendamentoId");

                    b.Property<Guid>("ServicoId");

                    b.HasKey("AgendamentoId", "ServicoId");

                    b.HasIndex("ServicoId");

                    b.ToTable("AgendamentoServicos");
                });

            modelBuilder.Entity("Klenzer.Domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro");

                    b.Property<string>("Cidade");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("DiaNascimento");

                    b.Property<string>("Estado");

                    b.Property<string>("Instagram");

                    b.Property<string>("MesNascimento");

                    b.Property<string>("Nome");

                    b.Property<string>("Telefone");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Klenzer.Domain.Entities.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Descricao");

                    b.Property<decimal>("Preco")
                        .HasColumnType("numeric(15, 2)");

                    b.Property<Guid>("TipoServicoId");

                    b.HasKey("Id");

                    b.HasIndex("TipoServicoId");

                    b.ToTable("Servicos");
                });

            modelBuilder.Entity("Klenzer.Domain.Entities.TipoServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("TipoServicos");
                });

            modelBuilder.Entity("Klenzer.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Role");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ebbed68e-6fc9-40b5-b9a3-e68ce97653b1"),
                            CreationTime = new DateTime(2019, 10, 22, 22, 59, 54, 357, DateTimeKind.Local).AddTicks(2421),
                            Name = "Admin",
                            Password = "admin",
                            Role = "Admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Klenzer.Domain.Entities.Agendamento", b =>
                {
                    b.HasOne("Klenzer.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Klenzer.Domain.Entities.User", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Klenzer.Domain.Entities.AgendamentoServico", b =>
                {
                    b.HasOne("Klenzer.Domain.Entities.Agendamento", "Agendamento")
                        .WithMany("AgendamentosServicos")
                        .HasForeignKey("AgendamentoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Klenzer.Domain.Entities.Servico", "Servico")
                        .WithMany()
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Klenzer.Domain.Entities.Servico", b =>
                {
                    b.HasOne("Klenzer.Domain.Entities.TipoServico", "TipoServico")
                        .WithMany()
                        .HasForeignKey("TipoServicoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
